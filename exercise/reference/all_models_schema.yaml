models:
  - name: stg_customers
    description: Customer data with basic cleaning and transformation applied, one row per customer.
    columns:
      - name: customer_id
        description: The unique key for each customer.
        data_tests:
          - not_null
          - unique

  - name: stg_locations
    description: List of open locations with basic cleaning and transformation applied, one row per location.
    columns:
      - name: location_id
        description: The unique key for each location.
        data_tests:
          - not_null
          - unique
    unit_tests:
      - name: test_does_location_opened_at_trunc_to_date
        description: "Check that opened_at timestamp is properly truncated to a date."
        model: stg_locations
        given:
          - input: source('ecom', 'raw_stores')
            rows:
              - { id: 1, name: "Vice City", tax_rate: 0.2, opened_at: "2016-09-01T00:00:00" }
              - { id: 2, name: "San Andreas", tax_rate: 0.1, opened_at: "2079-10-27T23:59:59.9999" }
        expect:
          rows:
            - { location_id: 1, location_name: "Vice City", tax_rate: 0.2, opened_date: "2016-09-01" }
            - { location_id: 2, location_name: "San Andreas", tax_rate: 0.1, opened_date: "2079-10-27" }

  - name: stg_order_items
    description: Individual food and drink items that make up our orders, one row per item.
    columns:
      - name: order_item_id
        description: The unique key for each order item.
        data_tests:
          - not_null
          - unique
      - name: order_id
        description: The corresponding order each order item belongs to
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_orders')
              field: order_id

  - name: stg_orders
    description: Order data with basic cleaning and transformation applied, one row per order.
    data_tests:
      - dbt_utils.expression_is_true:
          expression: "order_total - tax_paid = subtotal"
    columns:
      - name: order_id
        description: The unique key for each order.
        data_tests:
          - not_null
          - unique

  - name: stg_products
    description: Product (food and drink items that can be ordered) data with basic cleaning and transformation applied, one row per product.
    columns:
      - name: product_id
        description: The unique key for each product.
        data_tests:
          - not_null
          - unique

  - name: stg_supplies
    description: >
      List of our supply expenses data with basic cleaning and transformation applied.
      One row per supply cost, not per supply. As supply costs fluctuate they receive a new row with a new UUID. Thus there can be multiple rows per supply_id.
    columns:
      - name: supply_uuid
        description: The unique key of our supplies per cost.
        data_tests:
          - not_null
          - unique

  - name: customers
    description: Customer overview data mart, offering key details for each unique customer. One row per customer.
    data_tests:
      - dbt_utils.expression_is_true:
          expression: "lifetime_spend_pretax + lifetime_tax_paid = lifetime_spend"
    columns:
      - name: customer_id
        description: The unique key of the orders mart.
        data_tests:
          - not_null
          - unique
      - name: customer_name
        description: Customers' full name.
      - name: count_lifetime_orders
        description: Total number of orders a customer has ever placed.
      - name: first_ordered_at
        description: The timestamp when a customer placed their first order.
      - name: last_ordered_at
        description: The timestamp of a customer's most recent order.
      - name: lifetime_spend_pretax
        description: The sum of all the pre-tax subtotals of every order a customer has placed.
      - name: lifetime_tax_paid
        description: The sum of all the tax portion of every order a customer has placed.
      - name: lifetime_spend
        description: The sum of all the order totals (including tax) that a customer has ever placed.
      - name: customer_type
        description: Options are 'new' or 'returning', indicating if a customer has ordered more than once or has only placed their first order to date.
        data_tests:
          - accepted_values:
              values: ["new", "returning"]

  - name: locations
    description: Location dimension table. The grain of the table is one row per location.
    semantic_models:
      - name: locations
        model: ref('locations')
        defaults:
          agg_time_dimension: opened_at
        entities:
          - name: location
            type: primary
            expr: location_id
        dimensions:
          - name: location_name
            type: categorical
          - name: opened_at
            expr: opened_at
            type: time
            type_params:
              time_granularity: day
        measures:
          - name: average_tax_rate
            description: Average tax rate.
            expr: tax_rate
            agg: average

  - name: order_items
    columns:
      - name: order_item_id
        data_tests:
          - not_null
          - unique
      - name: order_id
        data_tests:
          - relationships:
              to: ref('orders')
              field: order_id
    unit_tests:
      - name: test_supply_costs_sum_correctly
        description: "Test that the counts of drinks and food orders convert to booleans properly."
        model: order_items
        given:
          - input: ref('stg_supplies')
            rows:
              - { product_id: 1, supply_cost: 4.50 }
              - { product_id: 2, supply_cost: 3.50 }
              - { product_id: 2, supply_cost: 5.00 }
          - input: ref('stg_products')
            rows:
              - { product_id: 1 }
              - { product_id: 2 }
          - input: ref('stg_order_items')
            rows:
              - { order_id: 1, product_id: 1 }
              - { order_id: 2, product_id: 2 }
              - { order_id: 2, product_id: 2 }
          - input: ref('stg_orders')
            rows:
              - { order_id: 1 }
              - { order_id: 2 }
        expect:
          rows:
            - { order_id: 1, product_id: 1, supply_cost: 4.50 }
            - { order_id: 2, product_id: 2, supply_cost: 8.50 }
            - { order_id: 2, product_id: 2, supply_cost: 8.50 }

  - name: orders
    description: Order overview data mart, offering key details for each order including if it's a customer's first order and a food vs. drink item breakdown. One row per order.
    data_tests:
      - dbt_utils.expression_is_true:
          expression: "order_items_subtotal = subtotal"
      - dbt_utils.expression_is_true:
          expression: "order_total = subtotal + tax_paid"
    columns:
      - name: order_id
        description: The unique key of the orders mart.
        data_tests:
          - not_null
          - unique
      - name: customer_id
        description: The foreign key relating to the customer who placed the order.
        data_tests:
          - relationships:
              to: ref('stg_customers')
              field: customer_id
      - name: order_total
        description: The total amount of the order in USD including tax.
      - name: ordered_at
        description: The timestamp the order was placed at.
      - name: order_cost
        description: The sum of supply expenses to fulfill the order.
      - name: is_food_order
        description: A boolean indicating if this order included any food items.
      - name: is_drink_order
        description: A boolean indicating if this order included any drink items.
    unit_tests:
      - name: test_order_items_compute_to_bools_correctly
        description: "Test that the counts of drinks and food orders convert to booleans properly."
        model: orders
        given:
          - input: ref('order_items')
            rows:
              - { order_id: 1, order_item_id: 1, is_drink_item: false, is_food_item: true }
              - { order_id: 1, order_item_id: 2, is_drink_item: true, is_food_item: false }
              - { order_id: 2, order_item_id: 3, is_drink_item: false, is_food_item: true }
          - input: ref('stg_orders')
            rows:
              - { order_id: 1 }
              - { order_id: 2 }
        expect:
          rows:
            - { order_id: 1, count_food_items: 1, count_drink_items: 1, is_drink_order: true, is_food_order: true }
            - { order_id: 2, count_food_items: 1, count_drink_items: 0, is_drink_order: false, is_food_order: true }

  - name: products
    description: Product dimension table. The grain of the table is one row per product.
    semantic_models:
      - name: products
        model: ref('products')
        entities:
          - name: product
            type: primary
            expr: product_id
        dimensions:
          - name: product_name
            type: categorical
          - name: product_type
            type: categorical
          - name: product_description
            type: categorical
          - name: is_food_item
            type: categorical
          - name: is_drink_item
            type: categorical
          - name: product_price
            type: categorical

  - name: supplies
    description: Supplies dimension table. The grain of the table is one row per supply and product combination.
    semantic_models:
      - name: supplies
        model: ref('supplies')
        entities:
          - name: supply
            type: primary
            expr: supply_uuid
        dimensions:
          - name: supply_id
            type: categorical
          - name: product_id
            type: categorical
          - name: supply_name
            type: categorical
          - name: supply_cost
            type: categorical
          - name: is_perishable_supply
            type: categorical
